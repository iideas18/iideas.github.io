<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>I/O模型</title>
      <link href="/2021/08/31/I-O%E6%A8%A1%E5%9E%8B/"/>
      <url>/2021/08/31/I-O%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="I-O-模型"><a href="#I-O-模型" class="headerlink" title="I/O 模型"></a>I/O 模型</h1><h2 id="1-User-space-and-Kernel-space"><a href="#1-User-space-and-Kernel-space" class="headerlink" title="1. User space and Kernel space"></a>1. User space and Kernel space</h2><p>用户态进程必须通过系统调用（System Call）向内核发出指令，完成调用系统资源之类的操作。</p><p><img src="/2021/08/31/I-O%E6%A8%A1%E5%9E%8B/1630377949097.png" alt="User Space and kernel space"></p><p><img src="/2021/08/31/I-O%E6%A8%A1%E5%9E%8B/1630377955247.png"></p><p>用户程序进行IO的读写依赖于底层的IO读写，基本上会用到底层的read和write两大系统调用。</p><blockquote><p>操作系统层面的read系统调用并不是直接从物理设备把数据读取到应用的内存中，write系统调用也不是直接把数据写入物理设备。</p><p>上层应用无论是调用操作系统的read还是调用操作系统的write，都会涉及缓冲区。</p><p>具体来说，上层应用通过操作系统的read系统调用把数据从<strong>内核缓冲区</strong>复制到<strong>应用程序的进程缓冲区</strong>，通过操作系统的write系统调用把数据从<strong>应用程序的进程缓冲区</strong>复制到<strong>操作系统的内核缓冲区</strong></p></blockquote><p>其调用流程如下：</p><p><img src="/2021/08/31/I-O%E6%A8%A1%E5%9E%8B/image-20210831210346484.png" alt="image-20210831210346484"></p><h2 id="2-IO模型"><a href="#2-IO模型" class="headerlink" title="2. IO模型"></a>2. IO模型</h2><h3 id="1-阻塞和非阻塞"><a href="#1-阻塞和非阻塞" class="headerlink" title="1. 阻塞和非阻塞"></a>1. 阻塞和非阻塞</h3><p>阻塞IO指的是需要内核IO操作彻底完成后才返回到用户空间执行用户程序的操作指令。</p><p>“阻塞”指的是<strong>用户程序（发起IO请求的进程或者线程）的执行状态</strong>。可以说传统的IO模型都是阻塞IO模型，并且在Java中默认创建的socket都属于阻塞IO模型。</p><p><strong>阻塞</strong>是指用户进程（或者线程）一直在等待，而不能做别的事情；</p><p><strong>非阻塞</strong>是指用户进程（或者线程）获得内核返回的状态值就返回自己的空间，可以去做别的事情。</p><p>在Java中，非阻塞IO的socket被设置为NONBLOCK模式。</p><h3 id="2-同步和异步"><a href="#2-同步和异步" class="headerlink" title="2. 同步和异步"></a>2. 同步和异步</h3><p>可以将同步与异步看成<strong>发起IO请求的两种方式</strong>。</p><p><strong>同步IO</strong>是指用户空间（进程或者线程）是主动发起IO请求的一方，系统内核是被动接收方。</p><p><strong>异步IO</strong>则反过来，系统内核是主动发起IO请求的一方，用户空间是被动接收方。</p><h3 id="3-常见的IO模型"><a href="#3-常见的IO模型" class="headerlink" title="3. 常见的IO模型"></a>3. 常见的IO模型</h3><h4 id="1-同步阻塞"><a href="#1-同步阻塞" class="headerlink" title="1. 同步阻塞"></a>1. 同步阻塞</h4><p>用户空间（或者线程）主动发起，需要等待内核IO操作彻底完成后才返回到用户空间的IO操作。在IO操作过程中，发起IO请求的用户进程（或者线程）处于阻塞状态。</p><p>在阻塞式IO模型中，从Java应用程序发起IO系统调用开始，一直到系统调用返回，这段时间内发起IO请求的Java进程（或者线程）是阻塞的。直到返回成功后，应用进程才能开始处理用户空间的缓冲区数据。</p><p>在Java应用程序进程中所有对socket连接进行的IO操作都是同步阻塞IO。</p><p><img src="/2021/08/31/I-O%E6%A8%A1%E5%9E%8B/image-20210831202828134.png" alt="image-20210831202828134"></p><blockquote><p>流程：</p><ol><li>从Java进行IO读后发起read系统调用开始，用户线程（或者线程）就进入阻塞状态。</li><li>当系统内核收到read系统调用后就开始准备数据。一开始，数据可能还没有到达内核缓冲区（例如，还没有收到一个完整的socket数据包），这时内核就要等待。</li><li>内核一直等到完整的数据到达，就会将数据从内核缓冲区复制到用户缓冲区（用户空间的内存），然后内核返回结果（例如返回复制到用户缓冲区中的字节数）。</li><li>直到内核返回后用户线程才会解除阻塞的状态，重新运行起来。</li></ol></blockquote><blockquote><p>优点：应用程序开发非常简单；在阻塞等待数据期间，用户线程挂起，基本不会占用CPU资源。</p><p>缺点：一般情况下会为每个连接配备一个独立的线程，一个线程维护一个连接的IO操作。在并发量小的情况下，这样做没有什么问题。在高并发的应用场景下，阻塞IO模型需要大量的线程来维护大量的网络连接，内存、线程切换开销会非常巨大，性能很低，基本上是不可用的。</p></blockquote><h4 id="2-同步非阻塞IO"><a href="#2-同步非阻塞IO" class="headerlink" title="2. 同步非阻塞IO"></a>2. 同步非阻塞IO</h4><p><strong>非阻塞IO（Non-Blocking IO，NIO）</strong>指的是用户空间的程序不需要等待内核IO操作彻底完成，可以立即返回用户空间去执行后续的指令，即发起IO请求的用户进程（或者线程）处于非阻塞状态，与此同时，内核会立即返回给用户一个IO状态值。</p><p><strong>同步非阻塞IO</strong>也可以简称为NIO，但是它不是Java编程中的NIO。Java编程中的NIO（NewIO）类库组件所归属的不是基础IO模型中的NIO模型，而是IO多路复用模型。</p><p>在Linux系统下，socket连接默认是阻塞模式，可以将socket设置成非阻塞模式。</p><blockquote><p> 特点：</p><ol><li>在内核缓冲区中没有数据的情况下，系统调用会立即返回一个调用失败的信息。</li><li>在内核缓冲区中有数据的情况下，在数据的复制过程中系统调用是阻塞的，直到完成数据从内核缓冲区复制到用户缓冲区。复制完成后，系统调用返回成功，用户进程（或者线程）可以开始处理用户空间的缓冲区数据。</li></ol></blockquote><p><img src="/2021/08/31/I-O%E6%A8%A1%E5%9E%8B/image-20210831203122827.png" alt="image-20210831203122827"></p><blockquote><p>流程：</p><ol><li>在内核数据没有准备好的阶段，用户线程发起IO请求时立即返回。所以，为了读取最终的数据，用户进程（或者线程）需要不断地发起IO系统调用。</li><li>内核数据到达后，用户进程（或者线程）发起系统调用，用户进程（或者线程）阻塞。内核开始复制数据，它会将数据从内核缓冲区复制到用户缓冲区，然后内核返回结果（例如返回复制到的用户缓冲区的字节数）。</li><li>用户进程（或者线程）读到数据后，才会解除阻塞状态，重新运行起来。也就是说，用户空间需要经过多次尝试才能保证最终真正读到数据，而后继续执行。</li></ol></blockquote><blockquote><p>优点:    每次发起的IO系统调用在内核等待数据过程中可以立即返回，用户线程不会阻塞，实时性较好。</p><p>缺点:    不断地轮询内核，这将占用大量的CPU时间，效率低下。</p></blockquote><p>在高并发应用场景中，同步非阻塞IO是性能很低的，也是基本不可用的，一般Web服务器都不使用这种IO模型。在Java的实际开发中，不会涉及这种IO模型，但是此模型还是有价值的，其作用在于其他IO模型中可以使用非阻塞IO模型作为基础，以实现其高性能。</p><h4 id="3-IO多路复用"><a href="#3-IO多路复用" class="headerlink" title="3. IO多路复用"></a>3. IO多路复用</h4><p>为了提高性能，操作系统引入了一种新的系统调用，专门用于<strong>查询IO文件描述符（含socket连接）的就绪状态</strong>。</p><p>在Linux系统中，新的系统调用为<strong>select/epoll</strong>系统调用。通过该系统调用，一个用户进程（或者线程）可以监视多个文件描述符，一旦某个描述符就绪（一般是内核缓冲区可读/可写），内核就能够将文件描述符的就绪状态返回给用户进程（或者线程），用户空间可以根据文件描述符的就绪状态进行相应的IO系统调用。</p><p><strong>IO多路复用（IO Multiplexing）</strong>属于一种经典的Reactor模式实现，有时也称为异步阻塞IO，Java中的Selector属于这种模型。</p><p>IO多路复用能避免同步非阻塞IO模型中轮询等待的问题。</p><p>在IO多路复用模型中通过select/epoll系统调用，单个应用程序的线程可以不断地轮询成百上千的socket连接的就绪状态，当某个或者某些socket网络连接有IO就绪状态时就返回这些就绪的状态（或者说就绪事件）。</p><p><img src="/2021/08/31/I-O%E6%A8%A1%E5%9E%8B/image-20210831203859906.png" alt="image-20210831203859906"></p><blockquote><p> 流程如下：</p><ol><li>选择器注册。首先，将需要read操作的目标文件描述符（socket连接）提前注册到Linux的select/epoll选择器中，在Java中所对应的选择器类是Selector类。然后，开启整个IO多路复用模型的轮询流程。</li><li>就绪状态的轮询。通过选择器的查询方法，查询所有提前注册过的目标文件描述符（socket连接）的IO就绪状态。通过查询的系统调用，内核会返回一个就绪的socket列表。当任何一个注册过的socket中的数据准备好或者就绪了就说明内核缓冲区有数据了，内核将该socket加入就绪的列表中，并且返回就绪事件。</li><li>用户线程获得了就绪状态的列表后，根据其中的socket连接发起read系统调用，用户线程阻塞。内核开始复制数据，将数据从内核缓冲区复制到用户缓冲区。</li><li>复制完成后，内核返回结果，用户线程才会解除阻塞的状态，用户线程读取到了数据，继续执行。</li></ol></blockquote><p>在用户进程进行IO就绪事件的轮询时，需要调用选择器的select查询方法，发起查询的用户进程或者线程是阻塞的。当然，如果使用了查询方法的非阻塞的重载版本，发起查询的用户进程或者线程也不会阻塞，重载版本会立即返回。</p><blockquote><p>特点：</p><p>IO多路复用模型的IO涉及两种系统调用，一种是IO操作的系统调用，另一种是select/epoll就绪查询系统调用。IO多路复用模型建立在操作系统的基础设施之上，即操作系统的内核必须能够提供多路分离的系统调用select/epoll。</p><p>和NIO模型相似，多路复用IO也需要轮询。负责select/epoll状态查询调用的线程，需要不断地进行select/epoll轮询，以找出达到IO操作就绪的socket连接。</p><p>IO多路复用模型与同步非阻塞IO模型是有密切关系的，具体来说，注册在选择器上的每一个可以查询的socket连接一般都设置成同步非阻塞模型，只是这一点对于用户程序而言是无感知的。</p></blockquote><blockquote><p>优点: 一个选择器查询线程可以同时处理成千上万的网络连接，所以用户程序不必创建大量的线程，也不必维护这些线程，从而大大减少了系统的开销。与一个线程维护一个连接的阻塞IO模式相比，这一点是IO多路复用模型的最大优势。</p><p>通过JDK的源码可以看出，Java语言的NIO组件在Linux系统上是使用epoll系统调用实现的。所以，Java语言的NIO组件所使用的就是IO多路复用模型。</p><p>缺点:本质上select/epoll系统调用是阻塞式的，属于同步IO，需要在读写事件就绪后由系统调用本身负责读写，也就是说这个读写过程是阻塞的。要彻底地解除线程的阻塞，就必须使用异步IO模型。</p></blockquote><h4 id="4-异步IO"><a href="#4-异步IO" class="headerlink" title="4. 异步IO"></a>4. 异步IO</h4><p><strong>异步IO（Asynchronous IO，AIO）</strong>指的是<strong>用户空间的线程变成被动接收者，而内核空间成为主动调用者</strong>。</p><p>在异步IO模型中，当用户线程收到通知时，数据已经被内核读取完毕并放在了用户缓冲区内，内核在IO完成后通知用户线程直接使用即可。</p><p>异步IO类似于Java中典型的<strong>回调模式</strong>，<strong>用户进程（或者线程）向内核空间注册了各种IO事件的回调函数，由内核去主动调用</strong>。</p><p>用户线程通过系统调用向内核注册某个IO操作。内核在整个IO操作（包括数据准备、数据复制）完成后通知用户程序，用户执行后续的业务操作。</p><p>在异步IO模型中，在整个内核的数据处理过程（包括内核将数据从网络物理设备（网卡）读取到内核缓冲区、将内核缓冲区的数据复制到用户缓冲区）中，用户程序都不需要阻塞。</p><p><img src="/2021/08/31/I-O%E6%A8%A1%E5%9E%8B/image-20210831204240318.png" alt="image-20210831204240318"></p><blockquote><p>流程如下：</p><ol><li>当用户线程发起了read系统调用后，立刻就可以去做其他的事，用户线程不阻塞。</li><li>内核开始IO的第一个阶段：准备数据。准备好数据，内核就会将数据从内核缓冲区复制到用户缓冲区。</li><li>内核会给用户线程发送一个信号（Signal），或者回调用户线程注册的回调方法，告诉用户线程read系统调用已经完成，数据已经读入用户缓冲区。</li><li>用户线程读取用户缓冲区的数据，完成后续的业务操作。</li></ol></blockquote><blockquote><p>特点</p><p>在内核等待数据和复制数据的两个阶段，用户线程都不是阻塞的。用户线程需要接收内核的IO操作完成的事件，或者用户线程需要注册一个IO操作完成的回调函数。正因为如此，异步IO有的时候也被称为信号驱动IO。</p><p>缺点: 应用程序仅需要进行事件的注册与接收，其余的工作都留给了操作系统，也就是说需要底层内核提供支持。理论上来说，异步IO是真正的异步输入输出，它的吞吐量高于IO多路复用模型的吞吐量。就目前而言，Windows系统下通过IOCP实现了真正的异步IO。</p></blockquote><p>在Linux系统下，异步IO模型在2.6版本才引入，JDK对它的支持目前并不完善，因此异步IO在性能上没有明显的优势。大多数高并发服务端的程序都是基于Linux系统的。因而，目前这类高并发网络应用程序的开发大多采用IO多路复用模型。大名鼎鼎的Netty框架使用的就是<strong>IO多路复用模型，而不是异步IO模型</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
